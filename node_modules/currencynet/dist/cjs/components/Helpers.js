"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.output_display = exports.shorten_number = exports.getRate = exports.fetchUserLoactionCurrencyCode = void 0;
const cookie_1 = require("./cookie");
const fetchUserLoactionCurrencyCode = () => {
    return (0, cookie_1.getCookie)('userLocation')
        ? Promise.resolve((0, cookie_1.getCookie)('userLocation'))
        : fetch(`https://ipapi.co/json/`)
            .then((res) => res.json())
            .then((res) => {
            // console.log(res.currency)
            // setClientCurrency(res.currency)
            (0, cookie_1.setCookie)('userLocation', res.currency, 1);
            return res.currency;
        })
            .catch((err) => {
            console.log(err);
            return 'USD';
        });
};
exports.fetchUserLoactionCurrencyCode = fetchUserLoactionCurrencyCode;
const getRate = (from, to) => {
    // fetch data from https://localhost then return the data
    // if (localStorage.getItem(clientCurrency)) {
    const data = parseInt((0, cookie_1.getCookie)(`${to}_${from}`));
    if ((0, cookie_1.getCookie)(`${to}_${from}`) !== '') {
        return new Promise((resolve) => {
            return resolve(data);
        });
    }
    return fetch(`https://lovely-puce-shoulder-pads.cyclic.app/${from}/${to}/`)
        .then((res) => res.json())
        .then((res) => {
        // console.log(res.conversion_rate)
        // setRate(res.conversion_rate)
        // localStorage.setItem(clientCurrency, res.conversion_rate)
        (0, cookie_1.setCookie)(`${to}_${from}`, res.conversion_rate, 1);
        return res.conversion_rate;
    })
        .catch((err) => {
        console.log(err);
        return false;
    });
};
exports.getRate = getRate;
const shorten_number = (number, float = 2) => {
    if (number < 1000) {
        return number.toString();
    }
    let value = number;
    let suffix = '';
    if (number < 1000000) {
        value = number / 1000;
        suffix = 'K';
    }
    else if (number < 1000000000) {
        value = number / 1000000;
        suffix = 'M';
    }
    else if (number < 1000000000000) {
        value = number / 1000000000;
        suffix = 'B';
    }
    else {
        return (number / 1000000000000).toFixed(float) + 'T';
    }
    return float > 0 ? value.toFixed(float) + suffix : Math.round(value) + suffix;
};
exports.shorten_number = shorten_number;
const output_display = (clientDisplay, value, isfloat = true, shortenCurrency = true) => {
    const return_value = `${clientDisplay.symbol}${isfloat
        ? shortenCurrency
            ? (0, exports.shorten_number)(value * clientDisplay.rate)
            : Number(value * clientDisplay.rate).toFixed(2)
        : shortenCurrency
            ? (0, exports.shorten_number)(Math.trunc(Math.round(Number(value * clientDisplay.rate))), 0)
            : Math.trunc(Math.round(Number(value * clientDisplay.rate)))}`;
    return return_value;
};
exports.output_display = output_display;
//# sourceMappingURL=Helpers.js.map